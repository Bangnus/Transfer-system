generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id            Int             @id @default(autoincrement())
  cid           String?         @unique
  username      String?         @unique
  name          String?
  firstname     String?
  lastname      String?
  type          String?
  faccode       String?
  facname       String?
  depcode       String?
  depname       String?
  seccode       String?
  secname       String?
  email         String?
  StudentCourse StudentCourse[]
  Notification  Notification[]
}

model Faculties {
  id          Int           @id @default(autoincrement())
  faccode     String        @unique
  facname     String
  departments Departments[]
}

model Departments {
  id      Int       @id @default(autoincrement())
  depcode String    @unique
  depname String
  seccode String    @unique
  secname String
  faccode String
  faculty Faculties @relation(fields: [faccode], references: [faccode])
}

// วิชาที่นักศึกษาเพิ่มเอง
model StudentCourse {
  id              Int              @id @default(autoincrement())
  courseCode      String
  courseName      String
  credit          String?
  grade           String?
  description     String?          @db.Text
  usernameId      String?
  courseTransfers CourseTransfer[]
  user            Users?           @relation(fields: [usernameId], references: [username])
}

// กลุ่มเรียนเฉพาะ
model SpecialGroup {
  id                Int                 @id @default(autoincrement())
  name              String
  SubjectCategoryID Int
  SubjectCategory   SubjectCategory     @relation(fields: [SubjectCategoryID], references: [id])
  secname           String?
  SubSpecialtyGroup SubSpecialtyGroup[]
}

// กลุ่มวิชาเฉพาะย่อย
model SubSpecialtyGroup {
  id             Int             @id @default(autoincrement())
  name           String
  SpecialGroup   SpecialGroup?   @relation(fields: [SpecialGroupID], references: [id])
  SpecialGroupID Int?
  SpecialCourse  SpecialCourse[]
}

// วิชาเฉพาะ
model SpecialCourse {
  id                  Int                @id @default(autoincrement())
  courseCode          String
  courseNameTH        String
  courseNameENG       String
  prerequisiteTH      String?
  prerequisiteENG     String?
  credit              String?
  descriptionTH       String?            @db.Text
  descriptionENG      String?            @db.Text
  SubSpecialtyGroup   SubSpecialtyGroup? @relation(fields: [SubSpecialtyGroupID], references: [id])
  SubSpecialtyGroupID Int?
  CourseTransfer      CourseTransfer[]
}

// หมวดวิชา
model SubjectCategory {
  id           Int            @id @default(autoincrement())
  name         String
  groups       Group[]
  SpecialGroup SpecialGroup[]
}

// กลุ่มวิชา
model Group {
  id                Int             @id @default(autoincrement())
  name              String
  subjectCategoryId Int
  subjectCategory   SubjectCategory @relation(fields: [subjectCategoryId], references: [id])
  courses           Course[]
}

// วิชา
model Course {
  id              Int              @id @default(autoincrement())
  courseCode      String
  courseNameTH    String
  courseNameENG   String
  prerequisiteTH  String?
  prerequisiteENG String?
  credit          Int
  descriptionTH   String?          @db.Text
  descriptionENG  String?          @db.Text
  courseTransfers CourseTransfer[]
  group           Group            @relation(fields: [groupId], references: [id])
  groupId         Int
}

// การเทียบโอนวิชา
model CourseTransfer {
  id                         Int             @id @default(autoincrement())
  originalCourseId           Int?
  transferredCourseId        Int?
  specialtransferredCourseId Int?
  student                    StudentCourse?  @relation(fields: [originalCourseId], references: [id])
  Course                     Course?         @relation(fields: [transferredCourseId], references: [id])
  SpecialCourse              SpecialCourse?  @relation(fields: [specialtransferredCourseId], references: [id])
  description                String?         @db.Text
  status                     TransferStatus? @default(PENDING)
  dateSubmitted              DateTime        @default(now()) // วันที่ส่งคำร้อง
}

enum TransferStatus {
  PENDING
  APPROVED
  REJECTED
}

model Notification {
  id        Int      @id @default(autoincrement())
  message   String?
  isRead    Boolean  @default(false)
  userId    String?
  createdAt DateTime @default(now())
  user      Users?   @relation(fields: [userId], references: [username])
}
